{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "LearningADFKP"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Employee_DS",
								"type": "DatasetReference"
							},
							"name": "Employee"
						},
						{
							"dataset": {
								"referenceName": "Department_DS",
								"type": "DatasetReference"
							},
							"name": "Department"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EmployeeDept_Output_DS",
								"type": "DatasetReference"
							},
							"name": "SinkEmpDept"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          E_ID as string,",
						"          E_NAME as string,",
						"          D_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Employee",
						"source(output(",
						"          D_ID as string,",
						"          D_NAME as string,",
						"          D_HEAD as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Department",
						"Employee, Department join(Employee@D_ID == Department@D_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 filter(D_NAME == 'CSE') ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['CSEDepartment'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          E_ID,",
						"          E_NAME,",
						"          D_ID = Employee@D_ID,",
						"          Dept_NAME = D_NAME,",
						"          Dept_HEAD = D_HEAD",
						"     ),",
						"     partitionBy('hash', 1)) ~> SinkEmpDept"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowRank')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Emp_Gender_DS",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Export_Samples_Data",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "rank1"
						},
						{
							"name": "rank2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          E_ID as string,",
						"          E_NAME as string,",
						"          D_ID as string,",
						"          Gender as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 rank(asc(D_ID, true),",
						"     output(RANK_ID as long)) ~> rank1",
						"rank1 rank(asc(D_ID, true),",
						"     output(Dense_Rank as long),",
						"     dense: true) ~> rank2",
						"rank2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Rank_DR_Employee.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_Lookup')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Emp_New_DS",
								"type": "DatasetReference"
							},
							"name": "EmpNew"
						},
						{
							"dataset": {
								"referenceName": "Department_DS",
								"type": "DatasetReference"
							},
							"name": "Dept"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EmployeeDept_Output_DS",
								"type": "DatasetReference"
							},
							"name": "Lookupoutput"
						}
					],
					"transformations": [
						{
							"name": "lookup1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          E_ID as string,",
						"          E_NAME as string,",
						"          D_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmpNew",
						"source(output(",
						"          D_ID as string,",
						"          D_NAME as string,",
						"          D_HEAD as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Dept",
						"EmpNew, Dept lookup(EmpNew@D_ID == Dept@D_ID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Lookup_Output_File'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Lookupoutput"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_union')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Employee_DS",
								"type": "DatasetReference"
							},
							"name": "Emp1"
						},
						{
							"dataset": {
								"referenceName": "Emp2",
								"type": "DatasetReference"
							},
							"name": "Emp2"
						},
						{
							"dataset": {
								"referenceName": "Emp2",
								"type": "DatasetReference"
							},
							"name": "Emp3"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EmployeeDept_Output_DS",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "union1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "derivedColumn4"
						}
					],
					"scriptLines": [
						"source(output(",
						"          E_ID as string,",
						"          E_NAME as string,",
						"          D_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Emp1",
						"source(output(",
						"          E_ID as string,",
						"          E_NAME as string,",
						"          D_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Emp2",
						"source(output(",
						"          E_ID as string,",
						"          E_NAME as string,",
						"          D_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Emp3",
						"derivedColumn4, derivedColumn3, derivedColumn2, select1 union(byName: true)~> union1",
						"Emp3 derive(E_NAME = concat(E_NAME, ' Stark'),",
						"          E_ID = toInteger(E_ID) + 10) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          E_ID,",
						"          E_NAME,",
						"          D_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"union1 sort(desc(E_NAME, true),",
						"     caseInsensitive: true) ~> sort1",
						"Emp3 derive(E_NAME = concat(substring(E_NAME,1,2),' Targerian'),",
						"          E_ID = toInteger(E_ID) + 20) ~> derivedColumn2",
						"Emp2 derive(E_ID = toInteger(E_ID)) ~> derivedColumn3",
						"Emp1 derive(E_ID = toInteger(E_ID)) ~> derivedColumn4",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['UnionEmployee'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/P_DataFlow_Execution')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow3",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_JSON_PARSE",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SCUSTOMERSJSONTEST": {},
									"ParseCustomer2": {
										"P_FileName": "JSON_Parse_Customer.csv",
										"P_FolderName": {
											"value": "@pipeline().globalParameters.RootPath",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Prev_Max_Employee_ID": {
						"type": "String"
					}
				},
				"annotations": [
					"CacheSink"
				],
				"lastPublishTime": "2024-07-17T16:03:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ST_EVERY_10_HOURS')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "P_LOAD_AZURE_EXPORT_TO_BLOB",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 10,
						"startTime": "2024-07-14T17:26:00",
						"endTime": "2024-07-20T23:59:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": []
		}
	]
}